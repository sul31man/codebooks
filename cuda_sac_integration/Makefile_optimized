# Makefile for optimized parallel CUDA environment

NVCC = nvcc
CC = gcc

# Optimized flags for shared memory and register efficiency
NVCC_FLAGS = -shared -Xcompiler -fPIC -O3 \
             -gencode arch=compute_50,code=sm_50 \
             -gencode arch=compute_60,code=sm_60 \
             -gencode arch=compute_70,code=sm_70 \
             -gencode arch=compute_75,code=sm_75 \
             -gencode arch=compute_80,code=sm_80 \
             -gencode arch=compute_86,code=sm_86 \
             -Xcompiler -Wall -Xcompiler -Wextra \
             --ptxas-options=-v \
             -maxrregcount=48 \
             --use_fast_math \
             -Xptxas -dlcm=cg

# Target library
TARGET = libenvironment_optimized.so
SOURCE = environment_parallel_optimized.cu

.PHONY: all clean test

all: $(TARGET)

$(TARGET): $(SOURCE)
	$(NVCC) $(NVCC_FLAGS) -o $@ $<
	@echo "Optimized library compiled successfully: $(TARGET)"
	@echo "Features enabled:"
	@echo "  - One block per Ka value (optimal distribution)"
	@echo "  - Proper shared memory with __syncthreads()"
	@echo "  - Cooperative codebook caching"
	@echo "  - Multiple simulations per thread"
	@echo "  - Fast math optimizations"
	@echo "  - Reduced memory usage (~4KB vs 6KB per thread)"

clean:
	rm -f $(TARGET) *.o

test: $(TARGET)
	@echo "Running basic library test..."
	python3 -c "import ctypes; lib = ctypes.CDLL('./$(TARGET)'); print('âœ… Library loads successfully')"

# Help target
help:
	@echo "Available targets:"
	@echo "  all    - Build optimized library (default)"
	@echo "  clean  - Remove compiled files"
	@echo "  test   - Test library loading"
	@echo "  help   - Show this help" 